# importing libraries

import piplite
await piplite.install(['numpy'])
await piplite.install(['pandas'])
await piplite.install(['seaborn'])
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

# preliminary analysis

from js import fetch
import io

URL = "https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBM-DS0321EN-SkillsNetwork/datasets/dataset_part_2.csv"
resp = await fetch(URL)
dataset_part_2_csv = io.BytesIO((await resp.arrayBuffer()).to_py())
df=pd.read_csv(dataset_part_2_csv)
df.head(5)

sns.catplot(y="PayloadMass", x="FlightNumber", hue="Class", data=df, aspect = 5)
plt.xlabel("Flight Number",fontsize=20)
plt.ylabel("Pay load Mass (kg)",fontsize=20)
plt.show()


# TASK 1 : Visualize the relationship between Flight Number and Launch Site

sns.catplot(x="FlightNumber", y="LaunchSite", hue="Class", data=df, aspect=5)
plt.xlabel("Flight Number", fontsize=15)
plt.ylabel("Launch Site", fontsize=15)
plt.title("Flight Number vs Launch Site by Class", fontsize=18)
plt.show()


# TASK 2 : Visualize the relationship between Payload Mass and Launch Site

sns.catplot(x="PayloadMass", y="LaunchSite", hue="Class", data=df, aspect=5)
plt.xlabel("Payload Mass (kg)", fontsize=15)
plt.ylabel("Launch Site", fontsize=15)
plt.title("Payload Mass vs Launch Site by Class", fontsize=18)
plt.show()


# TASK 3 : Visualize the relationship between success rate of each orbit type

# Calculate success rate per orbit
success_rate_orbit = df.groupby("Orbit")["Class"].mean().reset_index()

# Plot the success rate
plt.figure(figsize=(10,6))
sns.barplot(x="Orbit", y="Class", data=success_rate_orbit)
plt.xlabel("Orbit Type", fontsize=15)
plt.ylabel("Success Rate", fontsize=15)
plt.title("Success Rate by Orbit Type", fontsize=18)
plt.ylim(0,1)  # success rate between 0 and 1
plt.show()


# TASK 4 : Visualize the relationship between FlightNumber and Orbit type

sns.catplot(x="FlightNumber", y="Orbit", hue="Class", data=df, aspect=5)
plt.xlabel("Flight Number", fontsize=15)
plt.ylabel("Orbit Type", fontsize=15)
plt.title("Flight Number vs Orbit Type by Class", fontsize=18)
plt.show()


# TASK 5 : Visualize the relationship between Payload Mass and Orbit type

sns.catplot(x="PayloadMass", y="Orbit", hue="Class", data=df, aspect=5)
plt.xlabel("Payload Mass (kg)", fontsize=15)
plt.ylabel("Orbit Type", fontsize=15)
plt.title("Payload Mass vs Orbit Type by Class", fontsize=18)
plt.show()

# TASK 6 : Visualize the launch success yearly trend

year=[]
def Extract_year():
    for i in df["Date"]:
        year.append(i.split("-")[0])
    return year
Extract_year()
df['Date'] = year
df.head()
yearly_success = df.groupby("Date")["Class"].mean().reset_index()

plt.figure(figsize=(12,6))
sns.lineplot(x="Date", y="Class", data=yearly_success, marker='o')
plt.xlabel("Year", fontsize=15)
plt.ylabel("Average Success Rate", fontsize=15)
plt.title("Launch Success Trend by Year", fontsize=18)
plt.ylim(0,1)
plt.xticks(rotation=45)
plt.show()

#
features = df[['FlightNumber', 'PayloadMass', 'Orbit', 'LaunchSite', 'Flights', 'GridFins', 'Reused', 'Legs', 'LandingPad', 'Block', 'ReusedCount', 'Serial']]
features.head()
#


# TASK 7 : Create dummy variables to categorical columns
features_one_hot = pd.get_dummies(features, columns=['Orbit', 'LaunchSite', 'LandingPad', 'Serial'])
features_one_hot.head()


# TASK 8 : Cast all numeric columns to float64
features_one_hot = features_one_hot.astype('float64')
print(features_one_hot.head())
print(features_one_hot.dtypes)

