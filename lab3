!pip install sqlalchemy==1.3.9

!pip install ipython-sql
!pip install ipython-sql prettytable

%load_ext sql

import csv, sqlite3
import prettytable
prettytable.DEFAULT = 'DEFAULT'

con = sqlite3.connect("my_data1.db")
cur = con.cursor()

!pip install -q pandas

%sql sqlite:///my_data1.db

import pandas as pd
df = pd.read_csv("https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBM-DS0321EN-SkillsNetwork/labs/module_2/data/Spacex.csv")
df.to_sql("SPACEXTBL", con, if_exists='replace', index=False,method="multi")

#DROP THE TABLE IF EXISTS

%sql DROP TABLE IF EXISTS SPACEXTABLE;

%sql create table SPACEXTABLE as select * from SPACEXTBL where Date is not null

# TASK 1 : Display the names of the unique launch sites in the space mission
%%sql SELECT DISTINCT "Launch_Site" 
FROM SPACEXTABLE;

# TASK 2 : Display 5 records where launch sites begin with the string 'CCA'
%%sql SELECT 
    CASE WHEN "Class" = 1 THEN 'Success' ELSE 'Failure' END AS outcome,
    COUNT(*) AS total
FROM SPACEXTABLE
GROUP BY "Class";

# TASK 3 : Display the total payload mass carried by boosters launched by NASA (CRS)
%%sql SELECT SUM("Payload_Mass__kg_") AS total_payload
FROM SPACEXTABLE
WHERE "Customer" LIKE '%NASA (CRS)%';

# TASK 4 : Display average payload mass carried by booster version F9 v1.1
%%sql SELECT AVG("Payload_Mass__kg_") AS avg_payload
FROM SPACEXTABLE
WHERE "Booster_Version" = 'F9 v1.1';

# TASK 5 : List the date when the first succesful landing outcome in ground pad was acheived.
%%sql SELECT MIN("Date") AS first_successful_ground_landing
FROM SPACEXTABLE
WHERE "Landing_Outcome" = 'Success (ground pad)';

# TASK 6 : List the names of the boosters which have success in drone ship and have payload mass greater than 4000 but less than 6000
%%sql SELECT DISTINCT "Booster_Version"
FROM SPACEXTABLE
WHERE "Landing_Outcome" LIKE '%Success%' 
  AND "Landing_Outcome" LIKE '%drone%' 
  AND "Payload_Mass__kg_" > 4000
  AND "Payload_Mass__kg_" < 6000;

# TASK 7 : List the total number of successful and failure mission outcomes
%%sql SELECT 
    CASE 
        WHEN "Class" = 1 THEN 'Success'
        ELSE 'Failure'
    END AS outcome,
    COUNT(*) AS total
FROM SPACEXTABLE
GROUP BY "Class";

# TASK 8 : List all the booster_versions that have carried the maximum payload mass, using a subquery with a suitable aggregate function.
%%sql SELECT "Booster_Version"
FROM SPACEXTABLE
WHERE "Payload_Mass__kg_" = (
    SELECT MAX("Payload_Mass__kg_")
    FROM SPACEXTABLE
);

# TASK 9 : List the records which will display the month names, failure landing_outcomes in drone ship ,booster versions, launch_site for the months in year 2015.
%%sql SELECT 
    CASE substr("Date",6,2)
        WHEN '01' THEN 'January'
        WHEN '02' THEN 'February'
        WHEN '03' THEN 'March'
        WHEN '04' THEN 'April'
        WHEN '05' THEN 'May'
        WHEN '06' THEN 'June'
        WHEN '07' THEN 'July'
        WHEN '08' THEN 'August'
        WHEN '09' THEN 'September'
        WHEN '10' THEN 'October'
        WHEN '11' THEN 'November'
        WHEN '12' THEN 'December'
    END AS Month,
    "Landing_Outcome",
    "Booster_Version",
    "Launch_Site"
FROM SPACEXTABLE
WHERE "Landing_Outcome" LIKE '%Failure%' 
  AND "Landing_Outcome" LIKE '%drone%' 
  AND substr("Date",1,4) = '2015';

# TASK 10 : Rank the count of landing outcomes (such as Failure (drone ship) or Success (ground pad)) between the date 2010-06-04 and 2017-03-20, in descending order.
%%sql SELECT "Landing_Outcome", COUNT(*) AS outcome_count
FROM SPACEXTABLE
WHERE "Date" BETWEEN '2010-06-04' AND '2017-03-20'
GROUP BY "Landing_Outcome"
ORDER BY outcome_count DESC;
